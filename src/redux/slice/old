import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import getTodosQuery from '../../hooks/useGetTodos/getTodos.gql';

export const getTodos = createAsyncThunk('todos/getTodos', async (token) => {
    if (!token) return [];

    const response = await fetch('https://app.test.test/graphql', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({ query: getTodosQuery }),
    });

    const data = await response.json();

    if (data.errors) {
        console.error('GraphQL errors:', data.errors); // Log GraphQL errors
        throw new Error(data.errors.map(err => err.message).join(', '));
    }

    return data.data.getCustomerTodos;
});

const todosSlice = createSlice({
    name: 'todos',
    initialState: {
        todos: [],
        loading: false,
        error: null,
    },
    reducers: {},
    extraReducers: (builder) => {
        builder
            .addCase(getTodos.pending, (state) => {
                state.loading = true;
            })
            .addCase(getTodos.fulfilled, (state, action) => {
                state.loading = false;
                state.todos = action.payload;
                localStorage.setItem('customerTodos', JSON.stringify(action.payload));
            })
            .addCase(getTodos.rejected, (state, action) => {
                state.loading = false; // Reset loading state
                state.error = action.error.message;
            });
    },
});


export const selectTodos = (state) => state.todos.todos;
export const selectLoading = (state) => state.todos.loading;
export const selectError = (state) => state.todos.error;

export default todosSlice.reducer;
